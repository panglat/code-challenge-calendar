{"version":3,"sources":["util/propTypesConstants.js","components/app-components/SummarizedReminder/index.js","components/app-components/CalendarDay/index.js","components/app-components/CalendarTable/index.js","components/base-components/SimpleModal/index.js","components/base-components/Button/index.js","components/base-components/ColorPicker/index.js","components/app-components/CityWeatherView/index.js","components/app-components/ReminderModal/index.js","business/Weather/selectors.js","business/Weather/actions.js","business/Weather/actionTypes.js","components/app-components/CalendarHeader/index.js","components/app-components/Calendar/index.js","business/ReminderManager/selectors.js","business/ReminderManager/actions.js","business/ReminderManager/actionTypes.js","components/App/index.js","business/ReminderManager/reducer.js","business/Weather/reducer.js","store/rootReducer.js","util/api/OpenWeatherMapAPI.js","service/WeatherService.js","business/Weather/sagas.js","store/rootSaga.js","store/configureStore.js","index.js"],"names":["colorPropType","PropTypes","shape","date","func","format","month","r","number","g","b","a","SummarizedReminder","name","string","city","color","dateTime","secondsSinceEpoch","className","reminder","rest","cn","style","backgroundColor","moment","defaultProps","CalendarDay","day","monthNumber","onUpdateReminder","reminders","today00hEpoch","unix","today24hEpoch","add","duration","dayReminders","filter","onSummarizedReminderClick","event","stopPropagation","map","key","id","role","tabIndex","onClick","e","onKeyPress","CalendarTable","onCreateReminder","onDeleteReminder","year","days","firstDayOfTheMonth","firstWeekdayOfTheMonth","isoWeekday","firstCalendarDay","subtract","lastDayOfTheMonth","lastWeekdayOfTheMonth","lastCalendarDay","numOfWeeks","diff","asWeeks","calendar","currentDay","w","week","d","push","buildCalendarDaysArray","lastCalendarDay24h","remindersFilteredAndSorted","sort","SimpleModal","children","Button","buttonStyle","disabled","type","ColorPicker","onChangeComplete","useState","showPicker","setShowPicker","handleClick","value","CityWeatherView","weather","weatherError","src","iconUrl","alt","weatherMain","countryCode","Math","round","temperatureK","weatherDescription","ReminderModal","onClose","onDelete","onSave","dispatch","useDispatch","useSelector","state","getWeatherSelector","error","getWeatherErrorSelector","clearWeatherInfo","initialValues","reminderName","reminderTime","reminderCity","reminderColor","validate","values","errors","onSubmit","timeSplitted","split","set","hour","minute","second","millisecond","validateOnMount","handleChange","handleBlur","handleSubmit","isValid","setFieldValue","htmlFor","onChange","onBlur","maxLength","disableClock","payload","params","sys","country","icon","main","temp","description","rgb","CalendarHeader","monthYear","onDeleteAllReminders","onMonthYearChanged","onPreviousMonth","onNextMonth","xmlns","width","height","fill","points","Calendar","showReminderModal","setShowReminderModal","selectedReminder","setSelectedReminder","now","getCurrentMonthYear","currentMonthYear","setCurrentMonthYear","reminderManager","getReminders","onReminderModalClose","createEmptyReminder","deleteReminder","updateReminder","createReminder","App","store","initialState","loading","combineReducers","action","uuidv4","find","response","appid","OpenWeatherMapAPI","axios","create","baseURL","getWeather","parameters","get","q","data","console","log","fetchWeather","watchFetchWeather","sagas","call","result","put","message","takeLatest","all","rootSaga","weatherSagas","spawn","sagaMiddleware","createSagaMiddleware","composeEnhancers","composeWithDevTools","createStore","rootReducer","applyMiddleware","run","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ff3f4f3.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nexport const momentObjPropType = PropTypes.shape({\n  date: PropTypes.func,\n  format: PropTypes.func,\n  month: PropTypes.func,\n});\n\nexport const colorPropType = PropTypes.shape({\n  r: PropTypes.number,\n  g: PropTypes.number,\n  b: PropTypes.number,\n  a: PropTypes.number,\n});\n\nexport const reminderPropType = PropTypes.shape({\n  name: PropTypes.string,\n  city: PropTypes.string,\n  color: colorPropType,\n  dateTime: PropTypes.string,\n  secondsSinceEpoch: PropTypes.number,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport moment from 'moment';\nimport { reminderPropType } from '../../../util/propTypesConstants';\n\nimport './styles.scss';\n\nconst SummarizedReminder = ({ className, reminder, ...rest }) => (\n  <div\n    className={cn('summarized-reminder', className)}\n    style={{\n      backgroundColor: `rgba(${reminder.color.r}, ${reminder.color.g}, ${reminder.color.b}, ${reminder.color.a})`,\n    }}\n    {...rest}\n  >\n    <p className=\"summarized-reminder__name\">{reminder.name}</p>\n    <p className=\"summarized-reminder__time\">\n      {moment(reminder.dateTime).format('LT')}\n    </p>\n  </div>\n);\n\nSummarizedReminder.propTypes = {\n  className: PropTypes.string,\n  reminder: reminderPropType.isRequired,\n};\n\nSummarizedReminder.defaultProps = {\n  className: '',\n};\n\nexport default SummarizedReminder;\n","// @ packages\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\n// @ own\nimport './styles.scss';\nimport moment from 'moment';\nimport {\n  reminderPropType,\n  momentObjPropType,\n} from '../../../util/propTypesConstants';\nimport SummarizedReminder from '../SummarizedReminder';\n\nconst CalendarDay = ({\n  className,\n  day,\n  monthNumber,\n  onUpdateReminder,\n  reminders,\n  ...rest\n}) => {\n  const today00hEpoch = day.unix();\n  const today24hEpoch = moment(day).add(moment.duration('23:59:59')).unix();\n  const dayReminders = reminders.filter(\n    (r) =>\n      r.secondsSinceEpoch >= today00hEpoch &&\n      r.secondsSinceEpoch <= today24hEpoch,\n  );\n\n  const onSummarizedReminderClick = (event, reminder) => {\n    event.stopPropagation();\n    onUpdateReminder(reminder);\n  };\n\n  return (\n    <div className={cn('calendar-day', className)} {...rest}>\n      <div\n        className={cn('calendar-day__day', {\n          'calendar-day__day--other-month': day.month() + 1 !== monthNumber,\n        })}\n      >\n        {day.date()}\n      </div>\n      {dayReminders.map((r) => (\n        <SummarizedReminder\n          key={r.id}\n          reminder={r}\n          role=\"button\"\n          tabIndex={0}\n          onClick={(e) => onSummarizedReminderClick(e, r)}\n          onKeyPress={(e) => onSummarizedReminderClick(e, r)}\n        />\n      ))}\n    </div>\n  );\n};\n\nCalendarDay.propTypes = {\n  className: PropTypes.string,\n  day: PropTypes.shape(momentObjPropType).isRequired,\n  monthNumber: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    .isRequired,\n  onUpdateReminder: PropTypes.func,\n  reminders: PropTypes.arrayOf(reminderPropType).isRequired,\n};\n\nCalendarDay.defaultProps = {\n  className: '',\n  onUpdateReminder: () => {},\n};\n\nexport default CalendarDay;\n","/* eslint-disable no-plusplus */\n// @ packages\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport moment from 'moment';\nimport CalendarDay from '../CalendarDay';\n\n// @ own\nimport './styles.scss';\nimport { reminderPropType } from '../../../util/propTypesConstants';\n\nconst CalendarTable = ({\n  className,\n  monthNumber,\n  onCreateReminder,\n  onUpdateReminder,\n  onDeleteReminder,\n  reminders,\n  year,\n  ...rest\n}) => {\n  const days = [\n    'Sunday',\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n  ];\n\n  const buildCalendarDaysArray = () => {\n    // get day of the week (sun: 0 ... sat: 6)\n    const firstDayOfTheMonth = moment(\n      `${monthNumber}-01-${year}`,\n      'MM-DD-YYYY',\n    );\n    const firstWeekdayOfTheMonth = firstDayOfTheMonth.isoWeekday() % 7;\n    const firstCalendarDay = moment(firstDayOfTheMonth).subtract(\n      firstWeekdayOfTheMonth,\n      'days',\n    );\n    const lastDayOfTheMonth = moment(firstDayOfTheMonth)\n      .add(1, 'months')\n      .subtract(1, 'days');\n    const lastWeekdayOfTheMonth = lastDayOfTheMonth.isoWeekday() % 7;\n    const lastCalendarDay = moment(lastDayOfTheMonth).add(\n      6 - lastWeekdayOfTheMonth,\n      'days',\n    );\n    const numOfWeeks = moment\n      .duration(moment(lastCalendarDay).add(1, 'days').diff(firstCalendarDay))\n      .asWeeks();\n\n    const calendar = [];\n    const currentDay = moment(firstCalendarDay);\n    for (let w = 0; w < numOfWeeks; w++) {\n      const week = [];\n      for (let d = 0; d < 7; d++) {\n        week.push(moment(currentDay));\n        currentDay.add(1, 'days');\n      }\n      calendar.push(week);\n    }\n\n    return { firstCalendarDay, lastCalendarDay, calendar };\n  };\n\n  const renderHeaderRow = () =>\n    days.map((day) => (\n      <th key={day} className=\"calendar-table__header-cell\">\n        {day}\n      </th>\n    ));\n\n  const {\n    firstCalendarDay,\n    lastCalendarDay,\n    calendar,\n  } = buildCalendarDaysArray();\n\n  const lastCalendarDay24h = moment(lastCalendarDay).add(\n    moment.duration('23:59:59'),\n  );\n  const remindersFilteredAndSorted = reminders\n    .filter(\n      (r) =>\n        r.secondsSinceEpoch >= firstCalendarDay.unix() &&\n        r.secondsSinceEpoch <= lastCalendarDay24h.unix(),\n    )\n    .sort((a, b) => a.secondsSinceEpoch - b.secondsSinceEpoch);\n\n  return (\n    <table className={cn('calendar-table', className)} {...rest}>\n      <thead className=\"calendar-table__header\">\n        <tr className=\"calendar-table__header-row\">{renderHeaderRow()}</tr>\n      </thead>\n      <tbody className=\"calendar-table__body\">\n        {calendar.map((week) => (\n          <tr key={week[0].format()} className=\"calendar-table__body-row\">\n            {week.map((day) => (\n              <td\n                key={day.format()}\n                className=\"calendar-table__body-table-data\"\n              >\n                <CalendarDay\n                  day={day}\n                  monthNumber={monthNumber}\n                  reminders={remindersFilteredAndSorted}\n                  role=\"button\"\n                  tabIndex={0}\n                  onClick={() => onCreateReminder(day)}\n                  onKeyPress={() => onCreateReminder(day)}\n                  onUpdateReminder={onUpdateReminder}\n                />\n              </td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nCalendarTable.propTypes = {\n  className: PropTypes.string,\n  monthNumber: PropTypes.oneOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    .isRequired,\n  onCreateReminder: PropTypes.func,\n  onUpdateReminder: PropTypes.func,\n  onDeleteReminder: PropTypes.func,\n  reminders: PropTypes.arrayOf(reminderPropType).isRequired,\n  year: PropTypes.number.isRequired,\n};\n\nCalendarTable.defaultProps = {\n  className: '',\n  onCreateReminder: () => {},\n  onUpdateReminder: () => {},\n  onDeleteReminder: () => {},\n};\n\nexport default CalendarTable;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport './styles.scss';\n\nconst SimpleModal = ({ className, children }) => (\n  <div className=\"simple-modal\">\n    <section className={cn('simple-modal__main', className)}>\n      {children}\n    </section>\n  </div>\n);\n\nSimpleModal.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n};\n\nSimpleModal.defaultProps = {\n  className: '',\n  children: null,\n};\n\nexport default SimpleModal;\n","/* eslint-disable react/button-has-type */\n// @ packages\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\n// @ own\nimport './styles.scss';\n\nconst Button = ({\n  buttonStyle,\n  className,\n  children,\n  disabled,\n  type,\n  ...rest\n}) => (\n  <button\n    className={cn(\n      'button',\n      {\n        [`button--${buttonStyle}`]: buttonStyle,\n      },\n      className,\n    )}\n    disabled={disabled}\n    type={type}\n    {...rest}\n  >\n    {children}\n  </button>\n);\n\nButton.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.node,\n  disabled: PropTypes.bool,\n  buttonStyle: PropTypes.oneOf(['primary', 'secondary']),\n  type: PropTypes.oneOf(['button', 'submit', 'reset']),\n};\n\nButton.defaultProps = {\n  className: '',\n  children: null,\n  disabled: false,\n  buttonStyle: 'primary',\n  type: 'button',\n};\n\nexport default Button;\n","// @ packages\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { TwitterPicker } from 'react-color';\nimport { colorPropType } from '../../../util/propTypesConstants';\n\n// @ own\nimport './styles.scss';\n\nconst ColorPicker = ({ className, color, onChangeComplete, ...rest }) => {\n  const [showPicker, setShowPicker] = useState(false);\n\n  const handleClick = () => {\n    setShowPicker(!showPicker);\n  };\n\n  const handleClose = (value) => {\n    setShowPicker(false);\n    onChangeComplete(value);\n  };\n\n  return (\n    <div className={cn('color-picker', className)} {...rest}>\n      <div\n        className=\"color-picker__swatch\"\n        role=\"button\"\n        tabIndex={0}\n        onClick={handleClick}\n        onKeyPress={handleClick}\n      >\n        <div\n          className=\"color-picker__color\"\n          style={{\n            backgroundColor: `rgba(${color.r}, ${color.g}, ${color.b}, ${color.a})`,\n          }}\n        />\n      </div>\n      {showPicker && (\n        <TwitterPicker\n          id=\"event-color\"\n          name=\"eventColor\"\n          onChangeComplete={handleClose}\n          color={color}\n        />\n      )}\n    </div>\n  );\n};\n\nColorPicker.propTypes = {\n  className: PropTypes.string,\n  color: colorPropType.isRequired,\n  onChangeComplete: PropTypes.func,\n};\n\nColorPicker.defaultProps = {\n  className: '',\n  onChangeComplete: () => {},\n};\n\nexport default ColorPicker;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nimport './styles.scss';\n\nconst CityWeatherView = ({ className, city, weather, weatherError }) => {\n  return (\n    <div className={cn('city-weather-view', className)}>\n      <h4 className=\"city-weather-view__header\">\n        Weather for\n        <span>\n          &nbsp;\n          {city}\n        </span>\n      </h4>\n      {weather && (\n        <div className=\"city-weather-view__row\">\n          <div className=\"city-weather-view__icon-column\">\n            <img\n              src={weather.iconUrl}\n              alt={weather.weatherMain}\n              className=\"city-weather-view__image\"\n            />\n          </div>\n          <div className=\"city-weather-view__info-column\">\n            <p className=\"city-weather-view__paragraph\">\n              <strong>City:</strong>\n              <span>{`${weather.city}, ${weather.countryCode}`}</span>\n            </p>\n            <p className=\"city-weather-view__paragraph\">\n              <strong>Temperature:</strong>\n              <span>{`${Math.round(weather.temperatureK - 273.15)} C`}</span>\n            </p>\n            <p className=\"city-weather-view__paragraph\">\n              <strong>Weather:</strong>\n              <span>{`${weather.weatherMain} (${weather.weatherDescription})`}</span>\n            </p>\n          </div>\n        </div>\n      )}\n      {weatherError && (\n        <p className=\"city-weather-view__paragraph\">\n          Failed to the get the weather information\n        </p>\n      )}\n    </div>\n  );\n};\n\nCityWeatherView.propTypes = {\n  city: PropTypes.string.isRequired,\n  className: PropTypes.string,\n  weather: PropTypes.shape({\n    city: PropTypes.string,\n    countryCode: PropTypes.string,\n    iconUrl: PropTypes.string,\n    temperatureK: PropTypes.number,\n    weatherMain: PropTypes.string,\n    weatherDescription: PropTypes.string,\n  }),\n  weatherError: PropTypes.string,\n};\n\nCityWeatherView.defaultProps = {\n  className: '',\n  weather: null,\n  weatherError: null,\n};\n\nexport default CityWeatherView;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n// @ packages\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport TimePicker from 'react-time-picker';\nimport moment from 'moment';\nimport { Formik } from 'formik';\nimport SimpleModal from '../../base-components/SimpleModal';\nimport Button from '../../base-components/Button';\nimport ColorPicker from '../../base-components/ColorPicker';\nimport { reminderPropType } from '../../../util/propTypesConstants';\nimport {\n  requestWeather,\n  clearWeather,\n} from '../../../business/Weather/actions';\nimport {\n  getWeather as getWeatherSelector,\n  getWeatherError as getWeatherErrorSelector,\n} from '../../../business/Weather/selectors';\n// @ own\nimport './styles.scss';\nimport CityWeatherView from '../CityWeatherView';\n\nconst ReminderModal = ({ className, reminder, onClose, onDelete, onSave }) => {\n  const dispatch = useDispatch();\n  const weather = useSelector((state) => getWeatherSelector(state));\n  const weatherError = useSelector((state) => getWeatherErrorSelector(state));\n\n  const getWeather = (city) => {\n    dispatch(requestWeather({ city }));\n  };\n\n  const clearWeatherInfo = () => {\n    dispatch(clearWeather());\n  };\n\n  return (\n    <SimpleModal>\n      <Formik\n        initialValues={{\n          reminderName: reminder.name,\n          reminderTime: moment(reminder.dateTime).format('HH:mm'),\n          reminderCity: reminder.city,\n          reminderColor: reminder.color,\n        }}\n        validate={(values) => {\n          const errors = {};\n          if (!values.reminderName) {\n            errors.reminderName = 'Required';\n          }\n          if (!values.reminderTime) {\n            errors.reminderTime = 'Required';\n          }\n          if (!values.reminderCity) {\n            errors.reminderCity = 'Required';\n          }\n          if (!values.reminderColor) {\n            errors.reminderColor = 'Required';\n          }\n          return errors;\n        }}\n        onSubmit={(values) => {\n          const timeSplitted = values.reminderTime.split(':');\n          const dateTime = moment(reminder.dateTime).set({\n            hour: timeSplitted[0],\n            minute: timeSplitted[1],\n            second: 0,\n            millisecond: 0,\n          });\n\n          onSave({\n            ...reminder,\n            city: values.reminderCity,\n            color: values.reminderColor,\n            dateTime: dateTime.format(),\n            name: values.reminderName,\n            secondsSinceEpoch: dateTime.unix(),\n          });\n\n          clearWeatherInfo();\n        }}\n        validateOnMount\n      >\n        {({\n          values,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isValid,\n          setFieldValue,\n        }) => (\n          <form\n            className={cn('reminder-modal', className)}\n            onSubmit={handleSubmit}\n          >\n            <h1 className=\"reminder-modal__header\">Reminder</h1>\n            <div className=\"reminder-modal__group\">\n              <label className=\"reminder-modal__label\" htmlFor=\"reminderName\">\n                Name:\n                <br />\n                <input\n                  className=\"reminder-modal__input-text\"\n                  type=\"text\"\n                  id=\"reminderName\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.reminderName}\n                  maxLength=\"30\"\n                />\n              </label>\n            </div>\n            <div className=\"reminder-modal__group\">\n              <label className=\"reminder-modal__label\" htmlFor=\"reminder-date\">\n                Date:\n                <br />\n                <span>{moment(reminder.dateTime).format('MM-DD-YYYY')}</span>\n              </label>\n            </div>\n            <div className=\"reminder-modal__group\">\n              <label className=\"reminder-modal__label\" htmlFor=\"reminder-time\">\n                Time:\n                <br />\n                <span>\n                  <TimePicker\n                    name=\"reminderTime\"\n                    id=\"reminder-time\"\n                    disableClock\n                    onChange={(value) => {\n                      setFieldValue('reminderTime', value);\n                    }}\n                    value={values.reminderTime}\n                  />\n                </span>\n              </label>\n            </div>\n            <div className=\"reminder-modal__group\">\n              <label className=\"reminder-modal__label\" htmlFor=\"reminderCity\">\n                City:\n                <br />\n                <input\n                  className=\"reminder-modal__input-text\"\n                  type=\"text\"\n                  id=\"reminderCity\"\n                  onChange={(e) => {\n                    handleChange(e);\n                    clearWeatherInfo();\n                  }}\n                  onBlur={handleBlur}\n                  value={values.reminderCity}\n                />\n                <Button\n                  type=\"button\"\n                  onClick={() => {\n                    getWeather(values.reminderCity);\n                  }}\n                >\n                  Weather\n                </Button>\n              </label>\n            </div>\n            {(weather || weatherError) && (\n              <CityWeatherView\n                city={values.reminderCity}\n                weather={\n                  weather\n                    ? {\n                        city: weather.name,\n                        countryCode: weather.sys.country,\n                        iconUrl: `http://openweathermap.org/img/wn/${weather.weather[0].icon}.png`,\n                        temperatureK: weather.main.temp,\n                        weatherMain: weather.weather[0].main,\n                        weatherDescription: weather.weather[0].description,\n                      }\n                    : null\n                }\n                weatherError={weatherError}\n              />\n            )}\n            <div className=\"reminder-modal__group\">\n              <label className=\"reminder-modal__label\" htmlFor=\"reminder-color\">\n                Color:\n                <ColorPicker\n                  onChangeComplete={(value) => {\n                    setFieldValue('reminderColor', value.rgb);\n                  }}\n                  color={values.reminderColor}\n                />\n              </label>\n            </div>\n            <div className=\"reminder-modal__button-group\">\n              <Button\n                buttonStyle=\"secondary\"\n                type=\"button\"\n                onClick={(e) => {\n                  onClose(e);\n                  clearWeatherInfo();\n                }}\n              >\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={!isValid}>\n                Save\n              </Button>\n              {reminder.id && (\n                <Button\n                  type=\"button\"\n                  onClick={() => {\n                    onDelete(reminder.id);\n                    clearWeatherInfo();\n                  }}\n                >\n                  Delete\n                </Button>\n              )}\n            </div>\n          </form>\n        )}\n      </Formik>\n    </SimpleModal>\n  );\n};\n\nReminderModal.propTypes = {\n  className: PropTypes.string,\n  onClose: PropTypes.func,\n  onDelete: PropTypes.func,\n  onSave: PropTypes.func,\n  reminder: reminderPropType.isRequired,\n};\n\nReminderModal.defaultProps = {\n  className: '',\n  onClose: () => {},\n  onDelete: () => {},\n  onSave: () => {},\n};\n\nexport default ReminderModal;\n","export const getWeather = (state) => state.weather.weather;\nexport const getWeatherLoading = (state) => state.weather.loading;\nexport const getWeatherError = (state) => state.weather.error;\n","import {\n  WEATHER_FETCH_REQUESTED,\n  WEATHER_FETCH_SUCCEEDED,\n  WEATHER_FETCH_FAILED,\n  WEATHER_CLEAR,\n} from './actionTypes';\n\nexport const requestWeather = (params) => ({\n  type: WEATHER_FETCH_REQUESTED,\n  payload: { params },\n});\n\nexport const requestWeatherSuccess = (response) => ({\n  type: WEATHER_FETCH_SUCCEEDED,\n  payload: { response },\n});\n\nexport const requestWeatherError = (error) => ({\n  type: WEATHER_FETCH_FAILED,\n  payload: { error },\n});\n\nexport const clearWeather = () => ({\n  type: WEATHER_CLEAR,\n});\n","export const WEATHER_FETCH_REQUESTED = 'WEATHER_FETCH_REQUESTED';\nexport const WEATHER_FETCH_SUCCEEDED = 'WEATHER_FETCH_SUCCEEDED';\nexport const WEATHER_FETCH_FAILED = 'WEATHER_FETCH_FAILED';\nexport const WEATHER_CLEAR = 'WEATHER_CLEAR';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport moment from 'moment';\nimport { momentObjPropType } from '../../../util/propTypesConstants';\n\nimport './styles.scss';\n\nconst CalendarHeader = ({\n  className,\n  monthYear,\n  onDeleteAllReminders,\n  onMonthYearChanged,\n  ...rest\n}) => {\n  const onPreviousMonth = () => {\n    onMonthYearChanged(moment(monthYear).subtract(1, 'months'));\n  };\n\n  const onNextMonth = () => {\n    onMonthYearChanged(moment(monthYear).add(1, 'months'));\n  };\n\n  return (\n    <div className={cn('calendar-header', className)} {...rest}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"30px\"\n        height=\"30px\"\n        className=\"calendar-header__left-arrow\"\n        role=\"button\"\n        tabIndex={0}\n        onClick={onPreviousMonth}\n        onKeyPress={onPreviousMonth}\n      >\n        <polygon fill=\"red\" points=\"15,3 27,27 3,27 15,3\" />\n      </svg>\n      <div className=\"calendar-header__head\">\n        <h1>{monthYear.format('MMMM, YYYY')}</h1>\n        <span\n          role=\"button\"\n          tabIndex={0}\n          onClick={onDeleteAllReminders}\n          onKeyPress={onDeleteAllReminders}\n        >\n          Delete All Reminders\n        </span>\n      </div>\n\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"30px\"\n        height=\"30px\"\n        className=\"calendar-header__right-arrow\"\n        role=\"button\"\n        tabIndex={0}\n        onClick={onNextMonth}\n        onKeyPress={onNextMonth}\n      >\n        <polygon fill=\"red\" points=\"15,3 27,27 3,27 15,3\" />\n      </svg>\n    </div>\n  );\n};\n\nCalendarHeader.propTypes = {\n  monthYear: momentObjPropType.isRequired,\n  onDeleteAllReminders: PropTypes.func,\n  onMonthYearChanged: PropTypes.func,\n  className: PropTypes.string,\n};\n\nCalendarHeader.defaultProps = {\n  className: '',\n  onDeleteAllReminders: () => {},\n  onMonthYearChanged: () => {},\n};\n\nexport default CalendarHeader;\n","// @ packages\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport moment from 'moment';\nimport CalendarTable from '../CalendarTable';\nimport ReminderModal from '../ReminderModal';\nimport {\n  createReminder,\n  updateReminder,\n  deleteReminder,\n  deleteAllReminders,\n} from '../../../business/ReminderManager/actions';\nimport { getReminders } from '../../../business/ReminderManager/selectors';\nimport CalendarHeader from '../CalendarHeader';\n\n// @ own\nimport './styles.scss';\n\nconst Calendar = ({ className, ...rest }) => {\n  const getCurrentMonthYear = () => {\n    const now = moment();\n    return moment(`${now.month() + 1}-${now.year()}`, 'MM-YYYY');\n  };\n\n  const [showReminderModal, setShowReminderModal] = useState(false);\n  const [selectedReminder, setSelectedReminder] = useState(null);\n  const [currentMonthYear, setCurrentMonthYear] = useState(\n    getCurrentMonthYear(),\n  );\n  const dispatch = useDispatch();\n\n  const reminders = useSelector((state) => getReminders(state));\n\n  const createEmptyReminder = (day) => {\n    const now = moment();\n    const dateTime = day\n      ? day.set({\n          hour: now.hour(),\n          minute: now.minute(),\n          second: 0,\n          millisecond: 0,\n        })\n      : now;\n\n    return {\n      ...{},\n      city: '',\n      color: {\n        r: 18,\n        g: 115,\n        b: 222,\n        a: 1,\n      },\n      dateTime: dateTime.format(),\n      name: '',\n      secondsSinceEpoch: dateTime.unix(),\n    };\n  };\n\n  const onReminderModalClose = () => {\n    setShowReminderModal(false);\n  };\n\n  const onReminderModalDelete = (id) => {\n    dispatch(deleteReminder(id));\n    onReminderModalClose();\n  };\n\n  const onReminderModalSave = (reminder) => {\n    dispatch(\n      reminder.id\n        ? updateReminder(reminder.id, reminder)\n        : createReminder(reminder),\n    );\n    onReminderModalClose();\n  };\n\n  const onCreateReminder = (day) => {\n    setSelectedReminder(createEmptyReminder(day));\n    setShowReminderModal(true);\n  };\n\n  const onUpdateReminder = (reminder) => {\n    setSelectedReminder(reminder);\n    setShowReminderModal(true);\n  };\n\n  const onDeleteAllReminders = () => {\n    dispatch(deleteAllReminders());\n  };\n\n  return (\n    <div className={cn('calendar', className)} {...rest}>\n      <CalendarHeader\n        monthYear={currentMonthYear}\n        onDeleteAllReminders={onDeleteAllReminders}\n        onMonthYearChanged={(monthYear) => setCurrentMonthYear(monthYear)}\n      />\n      <CalendarTable\n        monthNumber={currentMonthYear.month() + 1}\n        year={currentMonthYear.year()}\n        onCreateReminder={onCreateReminder}\n        onUpdateReminder={onUpdateReminder}\n        reminders={reminders}\n      />\n      {showReminderModal && (\n        <ReminderModal\n          onClose={onReminderModalClose}\n          onDelete={onReminderModalDelete}\n          onSave={onReminderModalSave}\n          reminder={selectedReminder}\n        />\n      )}\n    </div>\n  );\n};\n\nCalendar.propTypes = {\n  className: PropTypes.string,\n};\n\nCalendar.defaultProps = {\n  className: '',\n};\n\nexport default Calendar;\n","// eslint-disable-next-line import/prefer-default-export\nexport const getReminders = (state) => state.reminderManager.reminders;\n","import {\n  CREATE_REMINDER,\n  FIND_REMINDER,\n  UPDATE_REMINDER,\n  DELETE_REMINDER,\n  DELETE_ALL_REMINDERS,\n} from './actionTypes';\n\nexport const createReminder = (reminder) => ({\n  type: CREATE_REMINDER,\n  payload: { reminder },\n});\n\nexport const findReminder = (id) => ({\n  type: FIND_REMINDER,\n  payload: { id },\n});\n\nexport const updateReminder = (id, reminder) => ({\n  type: UPDATE_REMINDER,\n  payload: { id, reminder },\n});\n\nexport const deleteReminder = (id) => ({\n  type: DELETE_REMINDER,\n  payload: { id },\n});\n\nexport const deleteAllReminders = () => ({\n  type: DELETE_ALL_REMINDERS,\n});\n","export const CREATE_REMINDER = 'CREATE_REMINDER';\nexport const FIND_REMINDER = 'FIND_REMINDER';\nexport const UPDATE_REMINDER = 'UPDATE_REMINDER';\nexport const DELETE_REMINDER = 'DELETE_REMINDER';\nexport const DELETE_ALL_REMINDERS = 'DELETE_ALL_REMINDER';\n","// @ packages\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider } from 'react-redux';\nimport Calendar from '../app-components/Calendar';\n\n// @ own\nimport './styles.scss';\n\nfunction App({ store }) {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <Calendar />\n      </div>\n    </Provider>\n  );\n}\n\nApp.propTypes = {\n  store: PropTypes.shape({}),\n};\n\nApp.defaultProps = {\n  store: null,\n};\n\nexport default App;\n","import { v4 as uuidv4 } from 'uuid';\nimport {\n  CREATE_REMINDER,\n  FIND_REMINDER,\n  UPDATE_REMINDER,\n  DELETE_REMINDER,\n  DELETE_ALL_REMINDERS,\n} from './actionTypes';\n\nconst initialState = {\n  reminders: [],\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case CREATE_REMINDER:\n      return {\n        ...state,\n        reminders: [\n          ...state.reminders,\n          {\n            ...action.payload.reminder,\n            id: uuidv4(),\n          },\n        ],\n      };\n\n    case FIND_REMINDER:\n      return {\n        ...state,\n        reminders: state.reminders.find((r) => r.id === action.payload.id),\n      };\n\n    case UPDATE_REMINDER:\n      return {\n        ...state,\n        reminders: state.reminders.map((r) =>\n          r.id === action.payload.id\n            ? { ...action.payload.reminder, id: action.payload.id }\n            : r,\n        ),\n      };\n\n    case DELETE_REMINDER:\n      return {\n        ...state,\n        reminders: state.reminders.filter((r) => r.id !== action.payload.id),\n      };\n\n    case DELETE_ALL_REMINDERS:\n      return {\n        ...state,\n        reminders: [],\n      };\n\n    default:\n      return state;\n  }\n}\n","import {\n  WEATHER_FETCH_REQUESTED,\n  WEATHER_FETCH_SUCCEEDED,\n  WEATHER_FETCH_FAILED,\n  WEATHER_CLEAR,\n} from './actionTypes';\n\nconst initialState = {\n  loading: false,\n  error: null,\n  weather: null,\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case WEATHER_FETCH_REQUESTED:\n      return {\n        ...state,\n        loading: true,\n      };\n\n    case WEATHER_FETCH_SUCCEEDED:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        weather: { ...action.payload.response },\n      };\n\n    case WEATHER_FETCH_FAILED:\n      return {\n        ...state,\n        loading: false,\n        weather: null,\n        error: action.payload.error,\n      };\n\n    case WEATHER_CLEAR:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        weather: null,\n      };\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\n\n/* App reducers */\nimport reminderManager from '../business/ReminderManager/reducer';\nimport weather from '../business/Weather/reducer';\n\nexport default combineReducers({\n  reminderManager,\n  weather,\n});\n","import axios from 'axios';\n\nexport const appid = '80fe903c6f5e04a104c9ca1a60b94e96';\n\nconst OpenWeatherMapAPI = axios.create({\n  baseURL: 'http://api.openweathermap.org/data/2.5/',\n});\n\nexport default OpenWeatherMapAPI;\n","/**\n * @file Manages user requests.\n * @module services/UserService\n */\nimport OpenWeatherMapAPI, { appid } from '../util/api/OpenWeatherMapAPI';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const getWeather = async (\n  parameters = {\n    city: 'mendoza',\n  },\n) => {\n  try {\n    const response = await OpenWeatherMapAPI.get('weather', {\n      params: {\n        q: parameters.city,\n        appid,\n      },\n    });\n    return response.data;\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.log(err);\n    throw err;\n  }\n};\n","import { call, put, takeLatest, all } from 'redux-saga/effects';\nimport { WEATHER_FETCH_REQUESTED } from './actionTypes';\nimport { requestWeatherSuccess, requestWeatherError } from './actions';\nimport { getWeather } from '../../service/WeatherService';\n\nfunction* fetchWeather(action) {\n  try {\n    const result = yield call(() => getWeather(action.payload.params));\n    yield put(requestWeatherSuccess(result));\n  } catch (e) {\n    yield put(requestWeatherError(e.message));\n  }\n}\n\nfunction* watchFetchWeather() {\n  yield takeLatest(WEATHER_FETCH_REQUESTED, fetchWeather);\n}\n\nexport default function* sagas() {\n  yield all([watchFetchWeather()]);\n}\n","import { all, spawn } from 'redux-saga/effects';\nimport weatherSagas from '../business/Weather/sagas';\n\nexport default function* rootSaga() {\n  yield all([weatherSagas].map(spawn));\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './rootReducer';\nimport rootSaga from './rootSaga';\n\n// create the saga middleware\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore() {\n  const composeEnhancers = composeWithDevTools({\n    // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n  });\n\n  // mount it on the Store\n  const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware)),\n  );\n\n  // then run the saga\n  sagaMiddleware.run(rootSaga);\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}